import * as React from "react"
import * as Widget from "./Widget"
import { AnyDoc } from "automerge/frontend"
import * as Reify from "./Reify"
import { stringify, parse } from "json-fn"

import * as Debug from "debug"
const log = Debug("component:repl")

type Command = {
  code: string
  result?: string
}

export interface Model {
  commands: Command[]
}

interface Props extends Widget.Props<Model> {}

class REPL extends React.Component<Props> {
  static reify(doc: AnyDoc): Model {
    return {
      commands: Reify.array(doc.commands),
    }
  }

  componentDidMount() {
    this.runREPL()
  }

  componentDidUpdate() {
    this.runREPL()
  }

  runREPL = () => {
    const commands = this.props.doc.commands || []

    if (commands.every(({ result }) => result !== undefined)) {
      return
    }

    log("commands", commands)

    this.props.change(doc => {
      const commands = doc.commands || []

      doc.commands.forEach((command, i) => {
        // skip already executed
        if (command.result) return

        let result
        let error
        let str

        try {
          result = eval(`(function() { return ${command.code}; })()`)
        } catch (e) {
          error = e.toString()
        }

        try {
          str = stringify({ result, error })
        } catch (e) {
          error = e.toString()
        }

        if (str) {
          doc.commands[i].result = str
        } else {
          doc.commands[i].result = stringify({ error })
        }
      })

      return doc
    })
  }

  render() {
    const commands = this.props.doc.commands || []

    return (
      <div style={{ padding: 20, overflow: "hidden", height: "100%" }}>
        <h3>REPL</h3>

        <div>
          {commands.map(command => {
            const { result, error } = command.result
              ? parse(command.result)
              : { error: undefined, result: undefined }

            let resultStr

            try {
              resultStr = JSON.stringify(result, null, 2)
            } catch {
              resultStr = stringify(result)
            }

            return (
              <div style={{ borderBottom: "1px solid #ddd" }}>
                <pre>>>> {command.code}</pre>
                {error && <pre style={{ color: "red" }}>{error}</pre>}
                {!error && resultStr && <pre>{resultStr}</pre>}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
}

export default Widget.create("REPL", REPL, REPL.reify)
